#! ruby
require 'test/unit'
require 'base_convert/base_convert'
require 'base_convert/configuration'
require 'base_convert/number'

class TestNumber < Test::Unit::TestCase
  include BaseConvert

  def test_number_works
    ##########################################
    assert_equal 123456789, '75bcd15'.to_i(16)
    ##########################################
    
    # Check the upcase
    x = Number.new('75bcd15', base: 16)
    assert_equal 123456789, x.to_i
    assert_equal '75BCD15', x.to_s

    # Check Integer counter
    x = Number.new(123456789, base: 16)
    assert_equal '75BCD15', x.to_s

    # We can give downcased digits
    x = Number.new(123456789, base: 16, digits: '0123456789abcdef')
    assert_equal '75bcd15', x.to_s

    ##########################################################
    assert_equal 81985529216486895, '123456789abcdef'.to_i(16)
    assert_equal 81985529216486895, '28q5cu4qnjff'.to_i(32)
    ##########################################################
    
    x = Number.new(81985529216486895, base: 16)
    assert_equal '123456789ABCDEF', x.to_s
    x = Number.new('123456789ABCDEF', base: 16)
    assert_equal 81985529216486895, x.to_i

    x = x.to_base 32
    assert_equal '28Q5CU4QNJFF', x.to_s

    x = x.to_base 62
    assert_equal '63UfDVRKBz', x.to_s

    x = x.to_base 94, :graph
    assert_equal '.K;$C>Vo@', x.to_s

    x = Number.new '.K;$C>Vo@', base: 94, digits: :graph
    assert_equal 81985529216486895, x.to_i

    # Empty String?!!!
    x = Number.new('', base: 2)
    assert_equal '', x.to_s
    assert_equal nil, x.to_i
  end

  def test_number_infers
    p95 = DIGITS[:P95]
    b64 = DIGITS[:B64]
    u47 = DIGITS[:U47]

    s = '101'
    x = Number.new s
    assert_equal s.to_i(2), x.to_i

    s = '123'
    x = Number.new s
    assert_equal s.to_i(4), x.to_i

    s = '12345670'
    x = Number.new s
    assert_equal s.to_i(8), x.to_i

    s = 'A2345670'
    x = Number.new s
    assert_equal s.to_i(16), x.to_i

    s = 'G2345670'
    x = Number.new s
    assert_equal s.to_i(32), x.to_i

    x = Number.new 'AvWbhPT3W'
    assert_equal 47, x.base
    assert_equal u47, x.digits

    x = Number.new '!A34567'
    assert_equal 64, x.base
    assert_equal p95, x.digits

    x = Number.new 'FMMuRhqY/6w'
    assert_equal 64, x.base
    assert_equal b64, x.digits

    x = Number.new '_234567'
    assert_equal 94, x.base
    assert_equal p95, x.digits

    x = Number.new '123 567'
    assert_equal 95, x.base
    assert_equal p95, x.digits
  end

  def test_number_edges
    x = Number.new 1
    assert_equal 10, x.base
    x = Number.new 1, digits: :u
    assert_equal '3479ACEFHJKLMNPRTUVWXYabcdefghijkmnopqrstuvwxyz', x.digits
  end

  def test_number_changes
    # 'Funky Space' now works!
    x = Number.new('Funky Space')
    assert_equal 'Funky Space 95:P95', x.inspect
    assert_equal 95, x.base
  end

  def test_number_raises
    error = assert_raises(RuntimeError){ Number.new 123, validate: :maybe}
    assert_equal 'validate must be either true or false', error.message

    error = assert_raises(RuntimeError){ Number.new 'ā'}
    assert_equal 'need digits to cover string', error.message

    error = assert_raises(RuntimeError) do
      x = Number.new(1, base: 100)
    end
    assert_equal 'need digits to cover base', error.message

    assert_raises(RegexpError){ Number.new 1, digits: :caca}

    error = assert_raises(RuntimeError) do
      x = Number.new(1, digits: '1')
    end
    assert_equal 'need at least 2 digits', error.message

    assert_nothing_raised do
      x = Number.new(1, digits: '01')
    end

    assert_raises(RegexpError){ Number.new 1, base: :caca}

    error = assert_raises(RuntimeError) do
      x = Number.new(1, base: 1)
    end
    assert_equal 'base must be greater than 1', error.message

    error = assert_raises(RuntimeError) do
      x = Number.new(1, base: 17, digits: '0123456789AbCdEf')
    end
    assert_equal 'digits must cover base', error.message

    error = assert_raises(RuntimeError) do
      x = Number.new('1A0', base: 2)
    end
    assert_equal 'digits in string must be under base', error.message

    error = assert_raises(RuntimeError) do
      x = Number.new(1, digits: '01234567890')
    end
    assert_equal 'digits must not have duplicates', error.message

    error = assert_raises(RuntimeError) do
      x = Number.new('AbC', digits: 'abc')
    end
    assert_equal 'digits must cover string', error.message

    error = assert_raises(RuntimeError) do
      x = Number.new(-1)
    end
    assert_equal 'integer can not be negative', error.message

    error = assert_raises(RuntimeError) do
      x = Number.new(:a)
    end
    assert_equal 'need counter String|Integer', error.message
  end
end
