#! ruby
require 'test/unit'
require 'base_convert'

# Just additional tests beyond original tc_number
# for version 3.1.

class TestKeys < Test::Unit::TestCase
  include BaseConvert

  def test_keys_completeness
    assert_equal BASE.keys.sort, DIGITS.keys.sort
  end

  def test_keys_base64
    [BASE64, :base64, :b64].each do |digits|
      n = Number.new 63, digits: digits
      assert_equal 64, n.base
      assert_equal 63, n.to_i
      assert_equal '/', n.to_s
      assert_equal BASE64, n.digits
    end

    [:base64, :b64].each do |base|
      n = Number.new 63, base: :base64
      assert_equal 64, n.base
      assert_equal 63, n.to_i
      assert_equal '/', n.to_s
      assert_equal BASE64, n.digits
    end
  end

  def test_keys_all
    BASE.keys.each do |key|
      base   = BASE[key]
      digits = DIGITS[key]

      n = Number.new base: key
      assert_equal 0, n.to_i
      assert_equal digits[0], n.to_s
      assert_equal base, n.base
      assert_equal digits, n.digits

      e = Number.new '', base: key
      assert_equal nil, e.to_i
      assert_equal '', e.to_s
      assert_equal base, e.base
      assert_equal digits, e.digits
    end

    BASE.keys.each do |key|
      digits = DIGITS[key]
      base   = BASE[key]

      n = Number.new digits: key
      assert_equal 0, n.to_i
      assert_equal digits[0], n.to_s
      assert_equal base, n.base, "base key: #{key}"
      assert_equal digits, n.digits

      e = Number.new '', digits: key
      assert_equal nil, e.to_i
      assert_equal '', e.to_s
      assert_equal base, e.base
      assert_equal digits, e.digits
    end
  end
end
