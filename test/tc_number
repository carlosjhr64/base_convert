#! ruby
require 'test/unit'
require 'base_convert'

class TestNumber < Test::Unit::TestCase
  include BaseConvert

  def test_number_works
    ##########################################
    assert_equal 123456789, '75bcd15'.to_i(16)
    ##########################################
    
    # Check the upcase
    x = Number.new('75bcd15', base: 16)
    assert_equal 123456789, x.to_i
    assert_equal '75BCD15', x.to_s

    # Check Integer counter
    x = Number.new(123456789, base: 16)
    assert_equal '75BCD15', x.to_s

    # We can give downcased digits
    x = Number.new(123456789, base: 16, digits: '0123456789abcdef')
    assert_equal '75bcd15', x.to_s

    ##########################################################
    assert_equal 81985529216486895, '123456789abcdef'.to_i(16)
    assert_equal 81985529216486895, '28q5cu4qnjff'.to_i(32)
    ##########################################################
    
    x = Number.new(81985529216486895, base: 16)
    assert_equal '123456789ABCDEF', x.to_s
    x = Number.new('123456789ABCDEF', base: 16)
    assert_equal 81985529216486895, x.to_i

    x = x.to_base 32
    assert_equal '28Q5CU4QNJFF', x.to_s

    x = x.to_base 62
    assert_equal '63UfDVRKBz', x.to_s

    x = x.to_base 94, :graph
    assert_equal '.K;$C>Vo@', x.to_s

    x = Number.new '.K;$C>Vo@', base: 94, digits: :graph
    assert_equal 81985529216486895, x.to_i

    # Empty String?!!!
    x = Number.new('', base: 2)
    assert_equal '', x.to_s
    assert_equal 0, x.to_i
  end

  def test_number_infers
    s = '12345670'
    x = Number.new s
    assert_equal s.to_i(8), x.to_i

    s = 'A2345670'
    x = Number.new s
    assert_equal s.to_i(16), x.to_i

    s = 'G2345670'
    x = Number.new s
    assert_equal s.to_i(32), x.to_i

    message = '*'
    begin
      x = Number.new '1234567'
    rescue
      message = $!.message
    end
    assert_equal 'Need base for WORD or WORD_.', message

    assert_nothing_raised do
      Number.new '~234567' # an obvious QGRAPH
    end

    message = '*'
    begin
      x = Number.new '!A34567'
    rescue
      message = $!.message
    end
    assert_equal 'Need base for QGRAPH or GRAPH.', message

    message = '*'
    begin
      x = Number.new '3479', digits: :u
    rescue
      message = $!.message
    end
    assert_equal 'Need base for UNAMBIGUOUS.', message
  end

  def test_number_edges
    x = Number.new 1
    assert_equal 10, x.base
    x = Number.new 1, digits: :u
    assert_equal '3479ACEFHJKLMNPRTUVWXYabcdefghijkmnopqrstuvwxyz', x.digits
  end

  def test_number_raises
    message = '*'
    begin
      x = Number.new('Funky Space')
    rescue
      message = $!.message
    end
    assert_equal 'Need digits.', message

    message = '*'
    begin
      x = Number.new('')
    rescue
      message = $!.message
    end
    assert_equal 'Need base.', message

    message = '*'
    begin
      x = Number.new(1, base: 100)
    rescue
      message = $!.message
    end
    assert_equal 'Need digits that can cover base 100.', message

    message = '*'
    begin
      x = Number.new(1, digits: :caca)
    rescue
      message = $!.message
    end
    assert_equal 'Unrecognized digits caca.', message

    message = '*'
    begin
      x = Number.new(1, digits: '1')
    rescue
      message = $!.message
    end
    assert_equal 'digits must be a String of at least length 2.', message
    assert_nothing_raised do
      x = Number.new(1, digits: '01')
    end

    message = '*'
    begin
      x = Number.new(1, base: :caca)
    rescue
      message = $!.message
    end
    assert_equal 'Unrecognized base caca.', message

    message = '*'
    begin
      x = Number.new(1, base: 1)
    rescue
      message = $!.message
    end
    assert_equal 'base must be an Integer greater than 1.', message

    message = '*'
    begin
      x = Number.new(1, base: 17, digits: '0123456789AbCdEf')
    rescue
      message = $!.message
    end
    assert_equal 'digits must cover base.', message

    message = '*'
    begin
      x = Number.new('1A0', base: 2)
    rescue
      message = $!.message
    end
    assert_equal 'digits in string must be under base.', message

    message = '*'
    begin
      x = Number.new(1, digits: '01234567890')
    rescue
      message = $!.message
    end
    assert_equal 'digits must not have duplicates.', message

    message = '*'
    begin
      x = Number.new('AbC', digits: 'abc')
    rescue
      message = $!.message
    end
    assert_equal 'digits must cover string.', message

    message = '*'
    begin
      x = Number.new(-1)
    rescue
      message = $!.message
    end
    assert_equal "integer can't be negative.", message

    message = '*'
    begin
      x = Number.new(:a)
    rescue
      message = $!.message
    end
    assert_equal "Need counter String|Integer.", message
  end
end
